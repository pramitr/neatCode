// Bellard's formula
// https://en.wikipedia.org/wiki/Bellard's_formula
// good for over 500 decimal places

// for bigPi(200,2000)
// 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056115269799816072420184698746015935843999876399927951098211752689824960789806200871987695575042105880669031336312609189293843149321452372234246488529443180269339081089454507344282243991032459463954254836876929282650783185662368907550626490219686967239113305413533203332731793270641337611905434256865791935168793604784044850927268793051414379235744479195063673349779280349895273445767597457315498972700872375877892313339439509782258365084857539525114132710364647931446894536820326349346885650593966787391128949950262484024424406620822297933197528486890649395709424649933968417934677912378554405904735109397989700756248527876210713363864252156556885042950773468636774062711999455543095003648672488856796908107141922587593880552608620126547871917295006746567330800624306060292885345590622975757352244852512884288909035949658456448915689573861377537643546019234228538157677744932092130841263804870478145550609574873461993562639050096113578053571280009918432604092417949589360186904945088584968278014488498965688552070024555017227963152280301419762688123399095225350684632058630217303242301348386009477054101847434835020432786613024340517744524017740414240604356956482992424084002896696086336264601942807331033706668031900663679219505430071625359602258568297214571908405568567017154043777979907112006437250805088352615583872567317094675254691832004603921881441631556960451032359848193384651876257146112



public static BigDecimal bigPi(int max,int digits) {
    BigDecimal num2power6 = new BigDecimal(64);
    BigDecimal sum = new BigDecimal(0);
    for(int i = 0; i < max; i++ ) {
        BigDecimal tmp;
        BigDecimal term ; 
        BigDecimal divisor;
        term = new BigDecimal(-32); 
        divisor = new BigDecimal(4*i+1); 
        tmp =  term.divide(divisor, digits, BigDecimal.ROUND_FLOOR);
        term = new BigDecimal(-1); 
        divisor = new BigDecimal(4*i+3); 
        tmp = tmp.add(term.divide(divisor, digits, BigDecimal.ROUND_FLOOR));
        term = new BigDecimal(256); 
        divisor = new BigDecimal(10*i+1); 
        tmp = tmp.add(term.divide(divisor, digits, BigDecimal.ROUND_FLOOR));
        term = new BigDecimal(-64); 
        divisor = new BigDecimal(10*i+3); 
        tmp = tmp.add(term.divide(divisor, digits, BigDecimal.ROUND_FLOOR));
        term = new BigDecimal(-4); 
        divisor = new BigDecimal(10*i+5); 
        tmp = tmp.add(term.divide(divisor, digits, BigDecimal.ROUND_FLOOR));
        term = new BigDecimal(-4); 
        divisor = new BigDecimal(10*i+7); 
        tmp = tmp.add(term.divide(divisor, digits, BigDecimal.ROUND_FLOOR));
        term = new BigDecimal(1); 
        divisor = new BigDecimal(10*i+9); 
        tmp = tmp.add(term.divide(divisor, digits, BigDecimal.ROUND_FLOOR));
        int s = ((1-((i&1)<<1)));
        divisor = new BigDecimal(2); 
        divisor = divisor.pow(10*i).multiply(new BigDecimal(s));
        sum = sum.add(tmp.divide(divisor, digits, BigDecimal.ROUND_FLOOR));
    }
    sum = sum.divide(num2power6,digits, BigDecimal.ROUND_FLOOR);
    return sum;
}
